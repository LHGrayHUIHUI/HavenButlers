server:
  port: 8081

spring:
  application:
    name: storage-service

  # PostgreSQL配置
  datasource:
    url: jdbc:postgresql://${POSTGRESQL_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_DB:smarthome}
    username: ${POSTGRESQL_USER:postgres}
    password: ${POSTGRESQL_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: StorageHikariPool
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      connection-test-query: SELECT 1

  # JPA配置
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # MongoDB配置
  data:
    mongodb:
      uri: mongodb://${MONGODB_USER:}${MONGODB_PASSWORD:}${MONGODB_HOST:localhost}:${MONGODB_PORT:27017}/${MONGODB_DB:smarthome}
      auto-index-creation: true

    # Redis配置（使用common模块的RedisUtils）
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 10000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  # Nacos配置
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_ADDR:localhost:8848}
        namespace: ${NACOS_NAMESPACE:public}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
      config:
        server-addr: ${NACOS_ADDR:localhost:8848}
        namespace: ${NACOS_NAMESPACE:public}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
        file-extension: yaml

# MinIO配置
minio:
  endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
  access-key: ${MINIO_ACCESS_KEY:minioadmin}
  secret-key: ${MINIO_SECRET_KEY:minioadmin}
  bucket-name: ${MINIO_BUCKET:smarthome}
  secure: false

# 集成infrastructure配置
base:
  exception:
    enabled: true
  trace:
    enabled: true
  response:
    include-timestamp: true
    include-trace-id: true

common:
  redis:
    enabled: true
    key-prefix: "storage:"
    default-timeout: 3600
  security:
    jwt-enabled: false  # 存储服务内部调用，不直接处理JWT
  thread-pool:
    enabled: true
    core-pool-size: 10
    max-pool-size: 50

# 存储服务特定配置
storage:
  # 文件存储配置 - 支持多种存储模式
  file:
    # 存储模式：local(本地文件系统) | minio(MinIO对象存储) | cloud(云存储)
    storage-type: ${STORAGE_TYPE:local}

    # 本地文件存储配置
    local:
      base-path: ${STORAGE_LOCAL_PATH:/data/haven-storage}  # 本地存储根目录
      auto-create-dirs: true                               # 自动创建目录
      max-file-size: 100MB                                # 单文件最大大小
      allowed-extensions: "pdf,doc,docx,txt,jpg,jpeg,png,gif,mp4,avi,mp3,wav,zip,rar"

    # MinIO对象存储配置
    minio:
      bucket-prefix: "family"                              # 桶名前缀
      auto-create-bucket: true                            # 自动创建桶

    # 云存储配置（预留，支持阿里云OSS、腾讯云COS等）
    cloud:
      provider: ${CLOUD_PROVIDER:}                        # aliyun | tencent | aws
      region: ${CLOUD_REGION:}
      access-key: ${CLOUD_ACCESS_KEY:}
      secret-key: ${CLOUD_SECRET_KEY:}
      bucket: ${CLOUD_BUCKET:}

  # 数据库连接管理配置
  database:
    default-timeout: 30
    max-connections: 100
    # 支持的数据库类型
    supported-types: "mysql,postgresql,mongodb"

    mysql:
      base-url: "jdbc:mysql://localhost:3306"
      username: "root"
      password: "password"

    postgresql:
      base-url: "jdbc:postgresql://localhost:5432"
      username: "postgres"
      password: "password"

  # 知识库配置
  knowledge:
    embedding:
      model: "text-embedding-ada-002"           # 向量化模型
      api-endpoint: ${EMBEDDING_API:}           # 向量化服务端点
    chunk:
      size: 512                                 # 文档分块大小
      overlap: 50                               # 分块重叠大小
    vector:
      dimension: 1536                           # 向量维度

  # 向量标签配置
  vector-tag:
    similarity:
      threshold: 0.7                            # 相似度阈值
    max-tags-per-file: 10                      # 每文件最大标签数

  encryption:
    enabled: true
    algorithm: AES
    key: ${ENCRYPT_KEY:HavenButlerStorageEncryptionKey2025}

  cache:
    enabled: true
    local-cache-size: 1000
    local-cache-ttl: 600

  isolation:
    enabled: true  # 启用家庭数据隔离
    strict-mode: true  # 严格模式，禁止跨家庭访问

# Actuator配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# 日志配置
logging:
  level:
    com.haven: DEBUG
    org.springframework.data: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"