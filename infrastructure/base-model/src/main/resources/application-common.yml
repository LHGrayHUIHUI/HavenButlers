# HavenButler 微服务公共配置文件
# 只包含基础设施配置，base-model业务配置由各服务独立设置

# ============================================================================
# 通用服务配置
# ============================================================================
spring:
  application:
    name: ${SERVICE_NAME:default-service}

  # Nacos配置中心 - 支持环境变量控制
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_ADDR:localhost:8848}
        namespace: ${NACOS_NAMESPACE:public}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
        enabled: ${NACOS_ENABLED:false}
        service: ${spring.application.name}
        metadata:
          management.context-path: /actuator
          version: 1.0.0
          zone: ${SERVICE_ZONE:default}
          environment: ${ENVIRONMENT:dev}
      config:
        server-addr: ${NACOS_ADDR:localhost:8848}
        namespace: ${NACOS_NAMESPACE:public}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
        file-extension: yml
        enabled: ${NACOS_ENABLED:false}

  # 数据源配置 - 本地默认配置，支持环境变量覆盖
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRESQL_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_DB:havenbutler}
    username: ${POSTGRESQL_USER:postgres}
    password: ${POSTGRESQL_PASSWORD:password}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # Redis配置
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:redis123}
    timeout: 10000ms
    database: 0
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms

  # JPA配置
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false

# ============================================================================
# JWT 基础配置
# ============================================================================
security:
  jwt-secret: ${JWT_SECRET:haven-butler-jwt-secret-key-2025}
  jwt-expiration: 7200000  # 2小时
  jwt-clock-skew: 30     # 时钟偏差容忍
  jwt-enabled: true

# JWT Token配置
jwt:
  access-token-validity: 7200000     # Access Token 2小时 (毫秒)
  refresh-token-validity: 604800000  # Refresh Token 7天 (毫秒)
  clock-skew: 30                     # 时钟偏差容忍（秒）

# ============================================================================
# BaseModel 基础设施配置
# ============================================================================
base-model:
  # 版本信息
  version: 1.0.0
  security:
    jwt-secret: fJmSbo7pBY8teyzVDyv7YxW1aXPKHSx0uFWxsomMJ4I=
  # 服务客户端配置 - 跨服务调用基础设施
  service-client:
    enabled: true                    # 启用统一服务调用
    timeout: 5000                    # 调用超时时间（毫秒）
    retry-count: 3                   # 重试次数
    connect-timeout: 3000            # 连接超时（毫秒）
    read-timeout: 5000               # 读取超时（毫秒）
    connection-pool:
      max-total: 200                 # 最大连接数
      max-per-route: 50              # 每路由最大连接数
      validate-after-inactivity: 2000  # 连接验证时间（毫秒）
      idle-timeout: 30               # 空闲超时（秒）

  # 缓存基础设施配置
  cache:
    enabled: true                    # 启用缓存服务
    default-ttl: 3600                # 默认缓存时间（秒）
    max-size: 10000                  # 最大缓存数量
    key-prefix: "haven:${spring.profiles.active:dev}:"  # 缓存键前缀

  # 分布式锁基础设施配置
  distributed-lock:
    enabled: true                    # 启用分布式锁
    default-timeout: 30              # 默认锁超时时间（秒）
    auto-renew: true                 # 自动续期

  # 指标收集基础设施配置
  metrics:
    enabled: true                    # 启用指标收集
    export-interval: 60              # 导出间隔（秒）

  # 消息队列基础设施配置
  messaging:
    enabled: false                   # 暂时禁用消息队列
    default-timeout: 5000            # 默认发送超时（毫秒）
    max-retry: 3                     # 最大重试次数

# ============================================================================
# 监控配置
# ============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  prometheus:
    metrics:
      export:
        enabled: true

# ============================================================================
# 基础日志配置
# ============================================================================
logging:
  level:
    com.haven: DEBUG
    org.springframework.web: INFO
    org.springframework.security: INFO
    root: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] %-5level %logger{36} - %msg%n"

# ============================================================================
# 环境特定配置
# ============================================================================
---
spring:
  config:
    activate:
      on-profile: dev

# 开发环境特定配置
logging:
  level:
    com.haven: DEBUG
    org.springframework.web: DEBUG
    root: DEBUG

---
spring:
  config:
    activate:
      on-profile: test

# 测试环境特定配置
logging:
  level:
    com.haven: INFO
    root: INFO

---
spring:
  config:
    activate:
      on-profile: prod

# 生产环境特定配置
logging:
  level:
    com.haven: WARN
    org.springframework.web: WARN
    root: WARN